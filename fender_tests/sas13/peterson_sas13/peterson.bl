shared B0, B1, B2, B3, B4, B5, B6;
local t0, t1, t2, t3, t4, t5, t6;

init
9: store B0 = *;
10: store B1 = *;
11: store B2 = *;
12: store B3 = *;
13: store B4 = *;
14: store B5 = *;
15: store B6 = *;

16: load t0 = B0;
17: load t1 = B1;
18: load t2 = B2;
19: load t3 = B3;
20: load t4 = B4;
21: load t5 = B5;
22: load t6 = B6;


23: nop; 

/* Statement turn = 0 */

 /* update predicate - B6: (turn = 0) */
24:   store B6 = choose(true, false);


25: nop; 

/* Statement flag0 = 0 */

 /* update predicate - B4: (flag0 = 0) */
26:   store B4 = choose(true, false);




27: nop; 

/* Statement flag1 = 0 */

 /* update predicate - B5: (flag1 = 0) */
28:   store B5 = choose(true, false);




/* Reset local variables */ 
29: t0 = 0; 
30: t1 = 0; 
31: t2 = 0; 
32: t3 = 0; 
33: t4 = 0; 
34: t5 = 0; 
35: t6 = 0; 
36: assume(!(false)); 


process 1
1: nop; 

/* Statement flag0 = 1 */
37: begin_atomic;

 /* update predicate - B4: (flag0 = 0) */
38:   store B4 = choose(false, true);



39: assume(!(false)); 

40: end_atomic;
2: nop; 

/* Statement turn = 1 */
41: begin_atomic;

 /* update predicate - B6: (turn = 0) */
42:   store B6 = choose(false, true);

43: assume(!(false)); 

44: end_atomic;
3: nop; 

/* Statement f1 = flag1 */
45: begin_atomic;
46:  load t5 = B5;

 /* update predicate - B0: (f1 = 0) */
47:   store B0 = choose((t5 != 0), (t5 == 0));


48: t5 = 0;

49: assume(!(false)); 

50: end_atomic;
4: nop; 

/* Statement t1 = turn */
51: begin_atomic;
52:  load t6 = B6;

 /* update predicate - B1: (t1 = 0) */
53:   store B1 = choose((t6 != 0), (t6 == 0));


54: t6 = 0;

55: assume(!(false)); 

56: end_atomic;
5: nop; 

/* Statement if ((t1 != 0) & (f1 != 0)) */ 

60: if (*) goto 58;
57: assume(!((B0 != 0) || (B1 != 0))); 

/* Statement goto goto 3 */ 
61:   if (true) goto 3; 

62: if (true) goto 59;
58: nop;
63: assume(!((B0 == 0 && B1 == 0))); 

59: nop;

6: nop; 

7: nop; 

/* Statement flag0 = 0 */
64: begin_atomic;

 /* update predicate - B4: (flag0 = 0) */
65:   store B4 = choose(true, false);



66: assume(!(false)); 

67: end_atomic;
/* Statement goto goto 1 */ 
68:   if (true) goto 1; 


process 2
1: nop; 

/* Statement flag1 = 1 */
69: begin_atomic;

 /* update predicate - B5: (flag1 = 0) */
70:   store B5 = choose(false, true);



71: assume(!(false)); 

72: end_atomic;
2: nop; 

/* Statement turn = 0 */
73: begin_atomic;

 /* update predicate - B6: (turn = 0) */
74:   store B6 = choose(true, false);

75: assume(!(false)); 

76: end_atomic;
3: nop; 

/* Statement f2 = flag0 */
77: begin_atomic;
78:  load t4 = B4;

 /* update predicate - B2: (f2 = 0) */
79:   store B2 = choose((t4 != 0), (t4 == 0));


80: t4 = 0;

81: assume(!(false)); 

82: end_atomic;
4: nop; 

/* Statement t2 = turn */
83: begin_atomic;
84:  load t6 = B6;

 /* update predicate - B3: (t2 = 0) */
85:   store B3 = choose((t6 != 0), (t6 == 0));


86: t6 = 0;

87: assume(!(false)); 

88: end_atomic;
5: nop; 

/* Statement if ((f2 != 0) & (t2 = 0)) */ 

92: if (*) goto 90;
89: assume(!((B2 != 0) || (B3 == 0))); 

/* Statement goto goto 3 */ 
93:   if (true) goto 3; 

94: if (true) goto 91;
90: nop;
95: assume(!((B2 == 0 && B3 != 0))); 

91: nop;

6: nop; 

7: nop; 

/* Statement flag1 = 0 */
96: begin_atomic;

 /* update predicate - B5: (flag1 = 0) */
97:   store B5 = choose(true, false);



98: assume(!(false)); 

99: end_atomic;
/* Statement goto goto 1 */ 
100:   if (true) goto 1; 

/* program counters: ((pc{1} != 6) || (pc{2} != 6)) */


assert always (  ((pc{1} != 6) || (pc{2} != 6)) );
