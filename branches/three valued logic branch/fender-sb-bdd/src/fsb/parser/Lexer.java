/* The following code was generated by JFlex 1.4.3 on 4/24/12 1:48 AM */

package fsb.parser;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/24/12 1:48 AM from the specification file
 * <tt>blender.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\6\1\0\1\10\1\5\22\0\1\10\1\42\4\0"+
    "\1\55\1\0\1\51\1\52\1\12\1\37\1\46\1\40\1\0\1\11"+
    "\1\3\11\4\1\45\1\7\1\43\1\41\1\44\2\0\32\1\1\47"+
    "\1\0\1\50\1\0\1\2\1\0\1\15\1\25\1\23\1\20\1\17"+
    "\1\27\1\30\1\14\1\26\2\1\1\21\1\36\1\31\1\22\1\32"+
    "\1\1\1\16\1\13\1\24\1\33\1\1\1\34\1\1\1\35\1\1"+
    "\1\53\1\56\1\54\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\2\4\1\5\1\1\1\6"+
    "\15\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\2\0\15\2\1\25\6\2\1\26\1\27\1\30\1\31"+
    "\1\32\1\0\7\2\1\33\3\2\1\34\7\2\1\35"+
    "\1\2\1\36\2\2\1\37\5\2\1\40\2\2\1\41"+
    "\2\2\1\42\2\2\1\43\2\2\1\44\5\2\1\45"+
    "\3\2\1\46\1\47\1\2\1\50\1\51\1\52\1\2"+
    "\1\53\1\2\1\54\5\2\1\55\1\2\1\56\1\57"+
    "\4\2\1\60\2\2\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\57\0\215\0\274\0\57"+
    "\0\57\0\353\0\57\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6"+
    "\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e"+
    "\0\57\0\57\0\u037d\0\u03ac\0\57\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\136"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\136\0\57"+
    "\0\57\0\57\0\57\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0"+
    "\0\u08ff\0\u092e\0\u095d\0\136\0\u098c\0\u09bb\0\u09ea\0\136"+
    "\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\136"+
    "\0\u0b62\0\57\0\u0b91\0\u0bc0\0\136\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\136\0\u0cda\0\u0d09\0\136\0\u0d38\0\u0d67"+
    "\0\136\0\u0d96\0\u0dc5\0\136\0\u0df4\0\u0e23\0\136\0\u0e52"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\136\0\u0f3d\0\u0f6c\0\u0f9b"+
    "\0\136\0\136\0\u0fca\0\136\0\136\0\136\0\u0ff9\0\136"+
    "\0\u1028\0\136\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\136"+
    "\0\u1142\0\136\0\136\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\136"+
    "\0\u122d\0\u125c\0\136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\10\1\12\1\13\1\14\1\4\1\15\1\4\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\4\4\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\60\0\4\4\6\0\24\4"+
    "\23\0\2\6\60\0\1\51\62\0\1\52\45\0\4\4"+
    "\6\0\1\4\1\53\7\4\1\54\7\4\1\55\2\4"+
    "\21\0\4\4\6\0\1\56\5\4\1\57\15\4\21\0"+
    "\4\4\6\0\16\4\1\60\5\4\21\0\4\4\6\0"+
    "\4\4\1\61\17\4\21\0\4\4\6\0\7\4\1\62"+
    "\14\4\21\0\4\4\6\0\1\4\1\63\1\64\21\4"+
    "\21\0\4\4\6\0\3\4\1\65\20\4\21\0\4\4"+
    "\6\0\2\4\1\66\1\4\1\67\17\4\21\0\4\4"+
    "\6\0\14\4\1\70\1\4\1\71\5\4\21\0\4\4"+
    "\6\0\2\4\1\72\10\4\1\73\10\4\21\0\4\4"+
    "\6\0\7\4\1\74\14\4\21\0\4\4\6\0\7\4"+
    "\1\75\14\4\21\0\4\4\6\0\3\4\1\76\4\4"+
    "\1\77\13\4\61\0\1\100\56\0\1\101\72\0\1\102"+
    "\57\0\1\103\7\0\1\10\47\0\12\52\1\104\44\52"+
    "\1\0\4\4\6\0\2\4\1\105\21\4\21\0\4\4"+
    "\6\0\7\4\1\106\14\4\21\0\4\4\6\0\2\4"+
    "\1\107\21\4\21\0\4\4\6\0\1\110\23\4\21\0"+
    "\4\4\6\0\6\4\1\111\12\4\1\112\2\4\21\0"+
    "\4\4\6\0\5\4\1\113\16\4\21\0\4\4\6\0"+
    "\10\4\1\114\13\4\21\0\4\4\6\0\2\4\1\115"+
    "\5\4\1\116\13\4\21\0\4\4\6\0\7\4\1\117"+
    "\14\4\21\0\4\4\6\0\1\120\23\4\21\0\4\4"+
    "\6\0\20\4\1\121\3\4\21\0\4\4\6\0\3\4"+
    "\1\122\20\4\21\0\4\4\6\0\15\4\1\123\6\4"+
    "\21\0\4\4\6\0\13\4\1\124\10\4\21\0\4\4"+
    "\6\0\6\4\1\125\15\4\21\0\4\4\6\0\16\4"+
    "\1\126\5\4\21\0\4\4\6\0\11\4\1\127\12\4"+
    "\21\0\4\4\6\0\17\4\1\130\4\4\21\0\4\4"+
    "\6\0\7\4\1\131\14\4\20\0\11\52\1\132\1\104"+
    "\44\52\1\0\4\4\6\0\3\4\1\133\20\4\21\0"+
    "\4\4\6\0\3\4\1\134\20\4\21\0\4\4\6\0"+
    "\17\4\1\135\4\4\21\0\4\4\6\0\4\4\1\136"+
    "\13\4\1\137\3\4\21\0\4\4\6\0\7\4\1\140"+
    "\14\4\21\0\4\4\6\0\2\4\1\141\21\4\21\0"+
    "\1\4\1\142\2\4\6\0\24\4\21\0\4\4\6\0"+
    "\5\4\1\143\16\4\21\0\4\4\6\0\2\4\1\144"+
    "\21\4\21\0\4\4\6\0\7\4\1\145\14\4\21\0"+
    "\4\4\6\0\4\4\1\146\17\4\21\0\4\4\6\0"+
    "\3\4\1\147\20\4\21\0\4\4\6\0\13\4\1\150"+
    "\10\4\21\0\4\4\6\0\11\4\1\151\12\4\21\0"+
    "\4\4\6\0\1\152\23\4\21\0\4\4\6\0\2\4"+
    "\1\153\21\4\21\0\4\4\6\0\7\4\1\154\14\4"+
    "\21\0\4\4\6\0\10\4\1\155\13\4\21\0\4\4"+
    "\6\0\4\4\1\156\17\4\21\0\4\4\6\0\4\4"+
    "\1\157\17\4\21\0\4\4\6\0\3\4\1\160\20\4"+
    "\21\0\4\4\6\0\23\4\1\161\21\0\4\4\6\0"+
    "\10\4\1\162\13\4\21\0\4\4\6\0\22\4\1\163"+
    "\1\4\21\0\4\4\6\0\2\4\1\164\21\4\21\0"+
    "\4\4\6\0\6\4\1\165\15\4\21\0\4\4\6\0"+
    "\1\166\23\4\21\0\4\4\6\0\13\4\1\167\10\4"+
    "\21\0\4\4\6\0\16\4\1\170\5\4\21\0\4\4"+
    "\6\0\4\4\1\171\17\4\21\0\4\4\6\0\6\4"+
    "\1\172\15\4\21\0\4\4\6\0\4\4\1\173\17\4"+
    "\21\0\4\4\6\0\5\4\1\174\16\4\21\0\4\4"+
    "\6\0\11\4\1\175\12\4\21\0\4\4\6\0\4\4"+
    "\1\176\17\4\21\0\4\4\6\0\2\4\1\177\21\4"+
    "\21\0\4\4\6\0\1\200\23\4\21\0\4\4\6\0"+
    "\11\4\1\201\12\4\21\0\4\4\6\0\4\4\1\202"+
    "\17\4\21\0\4\4\6\0\4\4\1\203\17\4\21\0"+
    "\1\4\1\204\2\4\6\0\24\4\21\0\4\4\6\0"+
    "\1\205\23\4\21\0\4\4\6\0\11\4\1\206\12\4"+
    "\21\0\4\4\6\0\7\4\1\207\14\4\21\0\4\4"+
    "\6\0\3\4\1\210\20\4\21\0\4\4\6\0\2\4"+
    "\1\211\21\4\21\0\4\4\6\0\1\212\23\4\21\0"+
    "\4\4\6\0\4\4\1\213\17\4\21\0\4\4\6\0"+
    "\23\4\1\214\21\0\4\4\6\0\11\4\1\215\12\4"+
    "\21\0\4\4\6\0\13\4\1\216\10\4\21\0\4\4"+
    "\6\0\7\4\1\217\14\4\21\0\4\4\6\0\10\4"+
    "\1\220\13\4\21\0\4\4\6\0\23\4\1\221\21\0"+
    "\4\4\6\0\13\4\1\222\10\4\21\0\4\4\6\0"+
    "\10\4\1\223\13\4\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4747];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\1\1\1\11\2\1\2\11\1\1"+
    "\1\11\15\1\2\11\2\1\12\11\2\1\2\0\25\1"+
    "\4\11\1\0\25\1\1\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Symbol symbol(int sym) {
    return new Symbol(sym, yyline+1, yycolumn+1);
  }
  
  private Symbol symbol(int sym, Object val) {
    return new Symbol(sym, yyline+1, yycolumn+1, val);
  }
  
  private void error(String message) {
    System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /* ignore */
          }
        case 50: break;
        case 32: 
          { return symbol(sym.LOAD);
          }
        case 51: break;
        case 31: 
          { return symbol(sym.SWAP);
          }
        case 52: break;
        case 15: 
          { return symbol(sym.LEFTBRACE);
          }
        case 53: break;
        case 34: 
          { return symbol(sym.INIT);
          }
        case 54: break;
        case 46: 
          { return symbol(sym.PROCESS);
          }
        case 55: break;
        case 3: 
          { return symbol(sym.NUMBER, new Integer(Integer.parseInt(yytext())));
          }
        case 56: break;
        case 41: 
          { return symbol(sym.ASSERT);
          }
        case 57: break;
        case 27: 
          { return symbol(sym.ATOMICDEC);
          }
        case 58: break;
        case 10: 
          { return symbol(sym.NOT);
          }
        case 59: break;
        case 25: 
          { return symbol(sym.AND);
          }
        case 60: break;
        case 40: 
          { return symbol(sym.SHARED);
          }
        case 61: break;
        case 9: 
          { return symbol(sym.ASSIGN);
          }
        case 62: break;
        case 39: 
          { return symbol(sym.FINAL);
          }
        case 63: break;
        case 43: 
          { return symbol(sym.ALWAYS);
          }
        case 64: break;
        case 7: 
          { return symbol(sym.PLUS);
          }
        case 65: break;
        case 11: 
          { return symbol(sym.LESS);
          }
        case 66: break;
        case 47: 
          { return symbol(sym.ALLOCATE);
          }
        case 67: break;
        case 33: 
          { return symbol(sym.TRUE);
          }
        case 68: break;
        case 2: 
          { return symbol(sym.IDENT, yytext());
          }
        case 69: break;
        case 19: 
          { return symbol(sym.LEFTCURLY);
          }
        case 70: break;
        case 37: 
          { return symbol(sym.LOCAL);
          }
        case 71: break;
        case 16: 
          { return symbol(sym.RIGHTBRACE);
          }
        case 72: break;
        case 24: 
          { return symbol(sym.NEQ);
          }
        case 73: break;
        case 13: 
          { return symbol(sym.COLON);
          }
        case 74: break;
        case 42: 
          { return symbol(sym.ASSUME);
          }
        case 75: break;
        case 48: 
          { return symbol(sym.ENDATOMIC);
          }
        case 76: break;
        case 12: 
          { return symbol(sym.GREATER);
          }
        case 77: break;
        case 23: 
          { return symbol(sym.EQUAL);
          }
        case 78: break;
        case 17: 
          { return symbol(sym.LEFTPAREN);
          }
        case 79: break;
        case 21: 
          { return symbol(sym.IF);
          }
        case 80: break;
        case 36: 
          { return symbol(sym.STORE);
          }
        case 81: break;
        case 49: 
          { return symbol(sym.BEGINATOMIC);
          }
        case 82: break;
        case 28: 
          { return symbol(sym.CAS);
          }
        case 83: break;
        case 26: 
          { return symbol(sym.OR);
          }
        case 84: break;
        case 44: 
          { return symbol(sym.CHOOSE);
          }
        case 85: break;
        case 1: 
          { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    error("Illegal character <"+ yytext()+">");
          }
        case 86: break;
        case 5: 
          { return symbol(sym.SEMI);
          }
        case 87: break;
        case 29: 
          { return symbol(sym.NOP);
          }
        case 88: break;
        case 20: 
          { return symbol(sym.RIGHTCURLY);
          }
        case 89: break;
        case 8: 
          { return symbol(sym.MINUS);
          }
        case 90: break;
        case 22: 
          { return symbol(sym.PC);
          }
        case 91: break;
        case 18: 
          { return symbol(sym.RIGHTPAREN);
          }
        case 92: break;
        case 45: 
          { return symbol(sym.BARRIER);
          }
        case 93: break;
        case 14: 
          { return symbol(sym.COMMA);
          }
        case 94: break;
        case 6: 
          { return symbol(sym.MUL);
          }
        case 95: break;
        case 38: 
          { return symbol(sym.FALSE);
          }
        case 96: break;
        case 30: 
          { return  symbol(sym.C_COMMENT, new String(yytext()));
          }
        case 97: break;
        case 35: 
          { return symbol(sym.GOTO);
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
