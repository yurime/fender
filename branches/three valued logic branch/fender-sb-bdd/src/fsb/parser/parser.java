
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 24 01:48:54 IDT 2012
//----------------------------------------------------

package fsb.parser;

import java_cup.runtime.*;
import fsb.ast.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 24 01:48:54 IDT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\040\004\000\002\002\004\000\002\040" +
    "\005\000\002\002\004\000\002\003\005\000\002\004\005" +
    "\000\002\005\005\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\010\004\000\002\007\005\000\002" +
    "\011\007\000\002\011\006\000\002\011\004\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\041\003" +
    "\000\002\013\006\000\002\014\006\000\002\014\006\000" +
    "\002\036\003\000\002\036\005\000\002\021\007\000\002" +
    "\030\012\000\002\031\013\000\002\015\005\000\002\016" +
    "\006\000\002\016\010\000\002\017\003\000\002\022\012" +
    "\000\002\023\010\000\002\024\006\000\002\020\003\000" +
    "\002\025\003\000\002\025\003\000\002\027\004\000\002" +
    "\032\003\000\002\032\003\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\033\003\000\002\033\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\037" +
    "\006\000\002\037\006\000\002\034\003\000\002\034\003" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\004\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\035\003\000\002\035" +
    "\006\000\002\035\006\000\002\035\005\000\002\035\003" +
    "\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\004\031\007\001\002\000\004\002\301\001" +
    "\002\000\004\030\275\001\002\000\004\045\016\001\002" +
    "\000\004\061\011\001\002\000\006\016\013\020\012\001" +
    "\002\000\006\016\ufffa\020\ufffa\001\002\000\004\061\014" +
    "\001\002\000\004\030\ufffd\001\002\000\006\016\ufffb\020" +
    "\ufffb\001\002\000\010\002\001\044\216\046\220\001\002" +
    "\000\006\060\022\062\021\001\002\000\010\002\ufff8\044" +
    "\ufff8\046\ufff8\001\002\000\014\002\ufff7\044\ufff7\046\ufff7" +
    "\060\210\062\021\001\002\000\014\002\uffe2\044\uffe2\046" +
    "\uffe2\060\uffe2\062\uffe2\001\002\000\004\017\024\001\002" +
    "\000\014\002\ufff2\044\ufff2\046\ufff2\060\ufff2\062\ufff2\001" +
    "\002\000\034\032\050\033\057\034\036\036\061\037\035" +
    "\040\025\041\037\042\060\043\045\052\032\053\031\054" +
    "\046\061\030\001\002\000\004\061\204\001\002\000\004" +
    "\016\uffe8\001\002\000\004\016\203\001\002\000\004\021" +
    "\173\001\002\000\004\016\uffd0\001\002\000\004\016\uffd1" +
    "\001\002\000\004\016\uffe5\001\002\000\004\016\uffe6\001" +
    "\002\000\004\016\uffd2\001\002\000\016\015\115\024\164" +
    "\056\116\057\120\060\071\061\072\001\002\000\004\061" +
    "\154\001\002\000\004\016\uffee\001\002\000\004\016\uffe9" +
    "\001\002\000\004\016\uffe3\001\002\000\004\016\uffed\001" +
    "\002\000\004\016\uffe7\001\002\000\004\061\151\001\002" +
    "\000\016\015\115\024\121\056\116\057\120\060\071\061" +
    "\072\001\002\000\004\016\uffea\001\002\000\004\061\145" +
    "\001\002\000\004\016\ufff0\001\002\000\004\016\uffeb\001" +
    "\002\000\004\016\uffec\001\002\000\004\016\ufff1\001\002" +
    "\000\004\016\uffe4\001\002\000\004\016\uffef\001\002\000" +
    "\006\022\064\061\066\001\002\000\004\061\062\001\002" +
    "\000\004\016\uffd6\001\002\000\004\020\063\001\002\000" +
    "\006\022\064\061\066\001\002\000\010\024\073\060\071" +
    "\061\072\001\002\000\004\020\067\001\002\000\012\007" +
    "\uffde\016\uffde\020\uffde\021\uffde\001\002\000\010\024\073" +
    "\060\071\061\072\001\002\000\012\004\075\005\100\006" +
    "\076\016\uffd4\001\002\000\036\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\016" +
    "\uffc3\020\uffc3\023\uffc3\025\uffc3\035\uffc3\001\002\000\036" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\020\uffc4\023\uffc4\025\uffc4" +
    "\035\uffc4\001\002\000\010\024\073\060\071\061\072\001" +
    "\002\000\012\004\075\005\100\006\076\025\077\001\002" +
    "\000\010\024\073\060\071\061\072\001\002\000\010\024" +
    "\073\060\071\061\072\001\002\000\036\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\016\uffc2\020\uffc2\023\uffc2\025\uffc2\035\uffc2\001\002" +
    "\000\010\024\073\060\071\061\072\001\002\000\036\004" +
    "\uffc0\005\uffc0\006\076\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\016\uffc0\020\uffc0\023\uffc0\025\uffc0\035" +
    "\uffc0\001\002\000\036\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\016\uffbf\020" +
    "\uffbf\023\uffbf\025\uffbf\035\uffbf\001\002\000\036\004\uffc1" +
    "\005\uffc1\006\076\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\016\uffc1\020\uffc1\023\uffc1\025\uffc1\035\uffc1" +
    "\001\002\000\012\004\075\005\100\006\076\023\105\001" +
    "\002\000\012\007\uffdd\016\uffdd\020\uffdd\021\uffdd\001\002" +
    "\000\004\021\107\001\002\000\014\006\111\024\073\055" +
    "\112\060\071\061\072\001\002\000\012\004\075\005\100" +
    "\006\076\016\uffe0\001\002\000\004\016\uffdf\001\002\000" +
    "\004\024\113\001\002\000\016\015\115\024\121\056\116" +
    "\057\120\060\071\061\072\001\002\000\020\004\075\005" +
    "\100\006\076\007\132\010\134\011\133\012\131\001\002" +
    "\000\016\015\115\024\121\056\116\057\120\060\071\061" +
    "\072\001\002\000\016\013\uffce\014\uffce\016\uffce\020\uffce" +
    "\025\uffce\035\uffce\001\002\000\010\013\124\014\126\020" +
    "\141\001\002\000\016\013\uffcd\014\uffcd\016\uffcd\020\uffcd" +
    "\025\uffcd\035\uffcd\001\002\000\016\015\115\024\121\056" +
    "\116\057\120\060\071\061\072\001\002\000\022\004\075" +
    "\005\100\006\076\007\132\010\134\011\133\012\131\025" +
    "\077\001\002\000\010\013\124\014\126\025\125\001\002" +
    "\000\016\015\115\024\121\056\116\057\120\060\071\061" +
    "\072\001\002\000\016\013\uffcc\014\uffcc\016\uffcc\020\uffcc" +
    "\025\uffcc\035\uffcc\001\002\000\016\015\115\024\121\056" +
    "\116\057\120\060\071\061\072\001\002\000\016\013\124" +
    "\014\uffcb\016\uffcb\020\uffcb\025\uffcb\035\uffcb\001\002\000" +
    "\016\013\uffca\014\uffca\016\uffca\020\uffca\025\uffca\035\uffca" +
    "\001\002\000\010\024\073\060\071\061\072\001\002\000" +
    "\010\024\073\060\071\061\072\001\002\000\010\024\073" +
    "\060\071\061\072\001\002\000\010\024\073\060\071\061" +
    "\072\001\002\000\024\004\075\005\100\006\076\013\uffc7" +
    "\014\uffc7\016\uffc7\020\uffc7\025\uffc7\035\uffc7\001\002\000" +
    "\024\004\075\005\100\006\076\013\uffc6\014\uffc6\016\uffc6" +
    "\020\uffc6\025\uffc6\035\uffc6\001\002\000\024\004\075\005" +
    "\100\006\076\013\uffc8\014\uffc8\016\uffc8\020\uffc8\025\uffc8" +
    "\035\uffc8\001\002\000\024\004\075\005\100\006\076\013" +
    "\uffc5\014\uffc5\016\uffc5\020\uffc5\025\uffc5\035\uffc5\001\002" +
    "\000\016\015\115\024\121\056\116\057\120\060\071\061" +
    "\072\001\002\000\010\013\124\014\126\025\143\001\002" +
    "\000\004\016\uffda\001\002\000\016\013\uffc9\014\uffc9\016" +
    "\uffc9\020\uffc9\025\uffc9\035\uffc9\001\002\000\004\021\146" +
    "\001\002\000\006\022\064\061\066\001\002\000\004\016" +
    "\uffe1\001\002\000\010\013\124\014\126\016\uffcf\001\002" +
    "\000\004\020\152\001\002\000\006\022\064\061\066\001" +
    "\002\000\004\016\uffd3\001\002\000\004\020\155\001\002" +
    "\000\006\022\064\061\066\001\002\000\004\007\157\001" +
    "\002\000\010\024\073\060\071\061\072\001\002\000\012" +
    "\004\075\005\100\006\076\020\161\001\002\000\010\024" +
    "\073\060\071\061\072\001\002\000\012\004\075\005\100" +
    "\006\076\016\uffd5\001\002\000\010\013\124\014\126\035" +
    "\171\001\002\000\020\006\165\015\115\024\121\056\116" +
    "\057\120\060\071\061\072\001\002\000\004\025\166\001" +
    "\002\000\004\035\167\001\002\000\004\060\170\001\002" +
    "\000\004\016\uffd7\001\002\000\004\060\172\001\002\000" +
    "\004\016\uffd8\001\002\000\012\024\073\055\175\060\071" +
    "\061\072\001\002\000\012\004\075\005\100\006\076\016" +
    "\uffd9\001\002\000\004\024\176\001\002\000\016\015\115" +
    "\024\121\056\116\057\120\060\071\061\072\001\002\000" +
    "\010\013\124\014\126\020\200\001\002\000\016\015\115" +
    "\024\121\056\116\057\120\060\071\061\072\001\002\000" +
    "\010\013\124\014\126\025\202\001\002\000\004\016\uffdb" +
    "\001\002\000\014\002\ufff4\044\ufff4\046\ufff4\060\ufff4\062" +
    "\ufff4\001\002\000\004\022\205\001\002\000\010\024\073" +
    "\060\071\061\072\001\002\000\012\004\075\005\100\006" +
    "\076\023\207\001\002\000\004\016\uffdc\001\002\000\004" +
    "\017\212\001\002\000\014\002\ufff3\044\ufff3\046\ufff3\060" +
    "\ufff3\062\ufff3\001\002\000\034\032\050\033\057\034\036" +
    "\036\061\037\035\040\025\041\037\042\060\043\045\052" +
    "\032\053\031\054\046\061\030\001\002\000\004\016\214" +
    "\001\002\000\014\002\ufff5\044\ufff5\046\ufff5\060\ufff5\062" +
    "\ufff5\001\002\000\010\002\ufff9\044\ufff9\046\ufff9\001\002" +
    "\000\004\060\273\001\002\000\004\002\uffff\001\002\000" +
    "\006\047\221\050\222\001\002\000\022\015\233\022\234" +
    "\024\232\051\225\056\227\057\231\060\226\061\223\001" +
    "\002\000\022\015\233\022\234\024\232\051\225\056\227" +
    "\057\231\060\226\061\223\001\002\000\026\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\023\uffb2" +
    "\025\uffb2\026\266\001\002\000\010\013\243\014\244\016" +
    "\265\001\002\000\004\026\262\001\002\000\024\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\016\uffae\023" +
    "\uffae\025\uffae\001\002\000\012\013\uffbc\014\uffbc\016\uffbc" +
    "\025\uffbc\001\002\000\012\007\252\010\254\011\253\012" +
    "\251\001\002\000\012\013\uffbb\014\uffbb\016\uffbb\025\uffbb" +
    "\001\002\000\022\015\233\022\234\024\232\051\225\056" +
    "\227\057\231\060\226\061\223\001\002\000\022\015\233" +
    "\022\234\024\232\051\225\056\227\057\231\060\226\061" +
    "\223\001\002\000\014\022\234\024\236\051\225\060\226" +
    "\061\223\001\002\000\004\023\241\001\002\000\014\022" +
    "\234\024\236\051\225\060\226\061\223\001\002\000\004" +
    "\025\240\001\002\000\024\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\016\uffad\023\uffad\025\uffad\001\002" +
    "\000\024\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\016\uffaf\023\uffaf\025\uffaf\001\002\000\012\013\uffb7" +
    "\014\uffb7\016\uffb7\025\uffb7\001\002\000\022\015\233\022" +
    "\234\024\232\051\225\056\227\057\231\060\226\061\223" +
    "\001\002\000\022\015\233\022\234\024\232\051\225\056" +
    "\227\057\231\060\226\061\223\001\002\000\012\013\243" +
    "\014\uffb9\016\uffb9\025\uffb9\001\002\000\012\013\uffb8\014" +
    "\uffb8\016\uffb8\025\uffb8\001\002\000\010\013\243\014\244" +
    "\025\261\001\002\000\014\007\252\010\254\011\253\012" +
    "\251\025\240\001\002\000\014\022\234\024\236\051\225" +
    "\060\226\061\223\001\002\000\014\022\234\024\236\051" +
    "\225\060\226\061\223\001\002\000\014\022\234\024\236" +
    "\051\225\060\226\061\223\001\002\000\014\022\234\024" +
    "\236\051\225\060\226\061\223\001\002\000\012\013\uffb5" +
    "\014\uffb5\016\uffb5\025\uffb5\001\002\000\012\013\uffb4\014" +
    "\uffb4\016\uffb4\025\uffb4\001\002\000\012\013\uffb6\014\uffb6" +
    "\016\uffb6\025\uffb6\001\002\000\012\013\uffb3\014\uffb3\016" +
    "\uffb3\025\uffb3\001\002\000\012\013\uffba\014\uffba\016\uffba" +
    "\025\uffba\001\002\000\004\060\263\001\002\000\004\027" +
    "\264\001\002\000\024\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\016\uffb0\023\uffb0\025\uffb0\001\002\000" +
    "\004\002\uffbd\001\002\000\004\060\267\001\002\000\004" +
    "\027\270\001\002\000\024\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\016\uffb1\023\uffb1\025\uffb1\001\002" +
    "\000\010\013\243\014\244\016\272\001\002\000\004\002" +
    "\uffbe\001\002\000\006\060\022\062\021\001\002\000\014" +
    "\002\ufff6\044\ufff6\046\ufff6\060\210\062\021\001\002\000" +
    "\004\061\011\001\002\000\004\045\ufffe\001\002\000\006" +
    "\016\300\020\012\001\002\000\004\045\ufffc\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\010\002\005\003\004\040\003\001\001\000" +
    "\002\001\001\000\004\004\275\001\001\000\006\006\014" +
    "\010\016\001\001\000\004\005\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\214\037\216\001\001\000" +
    "\006\011\017\041\022\001\001\000\002\001\001\000\004" +
    "\041\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\012\026\013\053\014\050\015\055" +
    "\016\037\017\041\020\042\021\052\022\051\023\046\024" +
    "\040\025\025\026\043\027\033\030\032\031\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\162\033\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\147\033\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\064\001\001\000\004\033\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\073\001\001\000\002\001\001\000\004\033\102" +
    "\001\001\000\004\033\101\001\001\000\002\001\001\000" +
    "\004\033\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\116\033" +
    "\113\001\001\000\002\001\001\000\006\032\143\033\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\122\033\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\127\033\113\001\001\000" +
    "\002\001\001\000\006\032\126\033\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\137\001\001\000" +
    "\004\033\136\001\001\000\004\033\135\001\001\000\004" +
    "\033\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\141\033\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\155\001\001\000\002\001\001\000\004\033\157\001" +
    "\001\000\002\001\001\000\004\033\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\122\033\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\176\033\113\001\001\000\002\001\001\000" +
    "\006\032\200\033\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\012\212\013\053\014" +
    "\050\015\055\016\037\017\041\020\042\021\052\022\051" +
    "\023\046\024\040\025\025\026\043\027\033\030\032\031" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\270\035\227\001\001\000\006\034\223" +
    "\035\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\246\035\247\001" +
    "\001\000\006\034\241\035\227\001\001\000\004\035\234" +
    "\001\001\000\002\001\001\000\004\035\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\245\035\227\001\001\000\006\034" +
    "\244\035\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\257\001" +
    "\001\000\004\035\256\001\001\000\004\035\255\001\001" +
    "\000\004\035\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\273\041\022\001\001\000\004\041\210\001\001\000\004" +
    "\005\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;


  Lexer lexer;

  public parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.println(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assert_arit_expr ::= LEFTPAREN assert_arit_expr RIGHTPAREN 
            {
              AssertAritExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertAritExpr e = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assert_arit_expr ::= NUMBER 
            {
              AssertAritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertConstExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assert_arit_expr ::= LEFTBRACE assert_arit_expr RIGHTBRACE 
            {
              AssertAritExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertAritExpr a = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssertIndirectGlobal(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assert_arit_expr ::= PC LEFTCURLY NUMBER RIGHTCURLY 
            {
              AssertAritExpr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssertPC(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assert_arit_expr ::= IDENT LEFTCURLY NUMBER RIGHTCURLY 
            {
              AssertAritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssertLocal(i, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assert_arit_expr ::= IDENT 
            {
              AssertAritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertGlobal(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assert_bool_expr ::= assert_arit_expr GREATER assert_arit_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertAritExpr l = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertAritExpr r = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComparsionBool(l, r, BoolExpr.BXType.GREATER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assert_bool_expr ::= assert_arit_expr LESS assert_arit_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertAritExpr l = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertAritExpr r = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComparsionBool(l, r, BoolExpr.BXType.LESS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assert_bool_expr ::= assert_arit_expr NEQ assert_arit_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertAritExpr l = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertAritExpr r = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComparsionBool(l, r, BoolExpr.BXType.NEQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assert_bool_expr ::= assert_arit_expr EQUAL assert_arit_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertAritExpr l = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertAritExpr r = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComparsionBool(l, r, BoolExpr.BXType.EQUAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assert_bool_expr ::= NOT assert_bool_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertBoolExpr l = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertNotBool(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assert_bool_expr ::= assert_bool_expr AND assert_bool_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertBoolExpr l = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertBoolExpr r = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComplexBool(l, r, BoolExpr.BXType.AND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assert_bool_expr ::= assert_bool_expr OR assert_bool_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertBoolExpr l = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertBoolExpr r = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComplexBool(l, r, BoolExpr.BXType.OR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assert_bool_expr ::= LEFTPAREN assert_bool_expr RIGHTPAREN 
            {
              AssertBoolExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertBoolExpr e = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assert_bool_expr ::= FALSE 
            {
              AssertBoolExpr RESULT =null;
		 RESULT = new AssertConstBool(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assert_bool_expr ::= TRUE 
            {
              AssertBoolExpr RESULT =null;
		 RESULT = new AssertConstBool(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assert_block ::= ASSERT ALWAYS assert_bool_expr SEMI 
            {
              Assert RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertBoolExpr e = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assert_block ::= ASSERT FINAL assert_bool_expr SEMI 
            {
              Assert RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertBoolExpr e = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arit_expr ::= arit_expr MUL arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.MUL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arit_expr ::= arit_expr MINUS arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.MINUS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_expr ::= arit_expr PLUS arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.PLUS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_expr ::= LEFTPAREN arit_expr RIGHTPAREN 
            {
              AritExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AritExpr e = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_expr ::= NUMBER 
            {
              AritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_expr ::= IDENT 
            {
              AritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LocalExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bool_expr ::= arit_expr GREATER arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.GREATER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bool_expr ::= arit_expr LESS arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.LESS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bool_expr ::= arit_expr NEQ arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.NEQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bool_expr ::= arit_expr EQUAL arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.EQUAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bool_expr ::= NOT bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotBool(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bool_expr ::= bool_expr AND bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr r = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexBool(l, r, BoolExpr.BXType.AND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bool_expr ::= bool_expr OR bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr r = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexBool(l, r, BoolExpr.BXType.OR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bool_expr ::= LEFTPAREN bool_expr RIGHTPAREN 
            {
              BoolExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr e = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool_expr ::= FALSE 
            {
              BoolExpr RESULT =null;
		 RESULT = new ConstBool(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool_expr ::= TRUE 
            {
              BoolExpr RESULT =null;
		 RESULT = new ConstBool(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assume_stat ::= ASSUME bool_expr 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr cond = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assume(cond); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assume_stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // begin_atomic_stat ::= ENDATOMIC 
            {
              Statement RESULT =null;
		 RESULT = new EndAtomic(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_atomic_stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // begin_atomic_stat ::= BEGINATOMIC 
            {
              Statement RESULT =null;
		 RESULT = new BeginAtomic(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_atomic_stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nop_stat ::= NOP 
            {
              Statement RESULT =null;
		 RESULT = new Nop(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nop_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_stat ::= ATOMICDEC IDENT COMMA shared_val 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sharedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sharedright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SharedVal shared = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtomicDec(dst, shared); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // swap_stat ::= SWAP IDENT COMMA shared_val COMMA arit_expr 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sharedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sharedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SharedVal shared = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int newvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int newvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr newval = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Swap(dst, shared, newval); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swap_stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cas_stat ::= CAS IDENT COMMA shared_val EQUAL arit_expr COMMA arit_expr 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sharedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sharedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SharedVal shared = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr val = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int newvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int newvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr newval = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CAS(dst, shared, val, newval); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cas_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // barrier_stat ::= BARRIER 
            {
              Statement RESULT =null;
		 RESULT = new Barrier(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barrier_stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // branch_stat ::= IF LEFTPAREN MUL RIGHTPAREN GOTO NUMBER 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer label = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Branch(new NondetBool(), label); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("branch_stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // branch_stat ::= IF bool_expr GOTO NUMBER 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExpr cond = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer label = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Branch(cond, label); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("branch_stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assign_stat ::= IDENT ASSIGN arit_expr 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr src = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(src, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // choose_store_stat ::= STORE shared_val ASSIGN CHOOSE LEFTPAREN bool_expr COMMA bool_expr RIGHTPAREN 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BoolExpr b1 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr b2 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChooseStore(b1,b2, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("choose_store_stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // choose_assign_stat ::= IDENT ASSIGN CHOOSE LEFTPAREN bool_expr COMMA bool_expr RIGHTPAREN 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BoolExpr b1 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr b2 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChooseAssign(b1,b2, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("choose_assign_stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // allocate_stat ::= ALLOCATE IDENT LEFTBRACE arit_expr RIGHTBRACE 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AritExpr num = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Allocate(dst, num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allocate_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // shared_val ::= LEFTBRACE arit_expr RIGHTBRACE 
            {
              SharedVal RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AritExpr a = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefSharedVal(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shared_val",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // shared_val ::= IDENT 
            {
              SharedVal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveSharedVal(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shared_val",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // store_stat ::= STORE shared_val ASSIGN MUL 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Store(new NondetArit(), dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("store_stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // store_stat ::= STORE shared_val ASSIGN arit_expr 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr src = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Store(src, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("store_stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // load_stat ::= LOAD IDENT ASSIGN shared_val 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SharedVal src = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Load(src, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("load_stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // c_comment ::= C_COMMENT 
            {
              Comment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Comment(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_comment",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= barrier_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= choose_store_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= choose_assign_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= assume_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= end_atomic_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= begin_atomic_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= dec_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= swap_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= cas_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= allocate_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= nop_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= branch_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= assign_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= store_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= load_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat_list ::= c_comment 
            {
              ArrayList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comment s = (Comment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); RESULT.add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat_list ::= stat_list c_comment 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comment s = (Comment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat_list ::= NUMBER COLON statement SEMI 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<Statement>(); s.setLabel(i); RESULT.add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat_list ::= stat_list NUMBER COLON statement SEMI 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 s.setLabel(i); l.add(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc ::= PROCESS NUMBER stat_list 
            {
              Code RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> s = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Statement end = new End(); end.setLabel(-1); s.add(end); RESULT = new Code(n, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // init_code ::= INIT stat_list 
            {
              Code RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> s = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Statement barrier = new Barrier(); barrier.setLabel(-2); s.add(barrier); 
	  Statement end = new End(); end.setLabel(-1); s.add(end); RESULT = new Code(0, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_code",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_area ::= init_code 
            {
              ArrayList<Code> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Code p = (Code)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Code>(); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_area",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_area ::= code_area proc 
            {
              ArrayList<Code> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Code> c = (ArrayList<Code>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Code p = (Code)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_area",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_list ::= IDENT 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_list ::= var_list COMMA IDENT 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 v.add(i); RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // local_decl ::= LOCAL var_list SEMI 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // shared_decl ::= SHARED var_list SEMI 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shared_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_area ::= shared_decl local_decl 
            {
              Declarations RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> s = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declarations(s, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_area",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= decl_area code_area assert_block 
            {
              MProgram RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Code> c = (ArrayList<Code>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assert a = (Assert)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MProgram(d, c, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MProgram start_val = (MProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= decl_area code_area 
            {
              MProgram RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Code> c = (ArrayList<Code>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MProgram(d, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

