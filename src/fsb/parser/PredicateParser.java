
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 25 14:41:38 IDT 2016
//----------------------------------------------------

package fsb.parser;

import java_cup.runtime.*;
import fsb.ast.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 25 14:41:38 IDT 2016
  */
public class PredicateParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PredicateParser() {super();}

  /** Constructor which sets the default scanner. */
  public PredicateParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PredicateParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\004\002\000\002\002\004\000\002\004" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\004\000\002\002\005\000\002\002\006\000\002" +
    "\002\006\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\022\002\001\006\001\014\001\016\001\020" +
    "\001\021\001\022\001\023\001\001\002\000\022\002\011" +
    "\006\016\014\014\016\015\020\010\021\013\022\007\023" +
    "\005\001\002\000\044\002\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\001\002\000\026\002\uffff\006\uffff\012\046\013\050\014" +
    "\uffff\016\uffff\020\uffff\021\uffff\022\uffff\023\uffff\001\002" +
    "\000\044\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\001\002\000" +
    "\030\002\ufffd\006\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\001\002\000" +
    "\004\002\000\001\002\000\020\004\022\005\024\006\023" +
    "\007\027\010\026\011\021\015\030\001\002\000\030\002" +
    "\ufffc\006\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\001\002\000\020\006" +
    "\016\014\014\016\015\020\010\021\013\022\007\023\005" +
    "\001\002\000\020\006\016\014\014\016\015\020\010\021" +
    "\013\022\007\023\005\001\002\000\030\002\ufffe\006\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\001\002\000\010\012\046\013\050" +
    "\017\047\001\002\000\022\004\022\005\024\006\023\007" +
    "\027\010\026\011\021\015\030\017\025\001\002\000\012" +
    "\015\044\016\032\022\007\023\005\001\002\000\010\016" +
    "\032\022\007\023\005\001\002\000\010\016\032\022\007" +
    "\023\005\001\002\000\010\016\032\022\007\023\005\001" +
    "\002\000\044\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\001\002" +
    "\000\012\015\036\016\032\022\007\023\005\001\002\000" +
    "\010\016\032\022\007\023\005\001\002\000\010\016\032" +
    "\022\007\023\005\001\002\000\034\002\ufff7\004\022\005" +
    "\024\006\023\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\001\002\000\010\016" +
    "\032\022\007\023\005\001\002\000\012\004\022\005\024" +
    "\006\023\017\025\001\002\000\034\002\ufff4\004\022\005" +
    "\024\006\023\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\001\002\000\034\002" +
    "\ufff3\004\022\005\024\006\023\012\ufff3\013\ufff3\014\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\001" +
    "\002\000\010\016\032\022\007\023\005\001\002\000\034" +
    "\002\ufff6\004\022\005\024\006\023\012\ufff6\013\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\001\002\000\044\002\uffed\004\uffed\005\uffed\006\023\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\001" +
    "\002\000\044\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\001\002" +
    "\000\044\002\uffee\004\uffee\005\uffee\006\023\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\001\002\000" +
    "\034\002\ufff2\004\022\005\024\006\023\012\ufff2\013\ufff2" +
    "\014\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\001\002\000\010\016\032\022\007\023\005\001\002" +
    "\000\034\002\ufff5\004\022\005\024\006\023\012\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\001\002\000\020\006\016\014\014\016\015\020" +
    "\010\021\013\022\007\023\005\001\002\000\030\002\ufffb" +
    "\006\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\001\002\000\020\006\016" +
    "\014\014\016\015\020\010\021\013\022\007\023\005\001" +
    "\002\000\030\002\ufffa\006\ufffa\012\046\013\ufffa\014\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\001" +
    "\002\000\030\002\ufff9\006\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\001" +
    "\002\000\030\002\ufff8\006\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\004\003\001\001\000\006\002\005\003" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\052\003\011\001\001" +
    "\000\006\002\016\003\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\042\001\001" +
    "\000\004\003\041\001\001\000\004\003\040\001\001\000" +
    "\004\003\037\001\001\000\002\001\001\000\004\003\034" +
    "\001\001\000\004\003\033\001\001\000\004\003\030\001" +
    "\001\000\002\001\001\000\004\003\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\044\001\001\000\002\001\001\000\006\002\051\003\011" +
    "\001\001\000\002\001\001\000\006\002\050\003\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PredicateParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PredicateParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PredicateParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;


  PredLexer lexer;

  public PredicateParser(PredLexer lex) {
      super(lex);
      lexer = lex;
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.println(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PredicateParser$actions {
  private final PredicateParser parser;

  /** Constructor */
  CUP$PredicateParser$actions(PredicateParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PredicateParser$do_action(
    int                        CUP$PredicateParser$act_num,
    java_cup.runtime.lr_parser CUP$PredicateParser$parser,
    java.util.Stack            CUP$PredicateParser$stack,
    int                        CUP$PredicateParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PredicateParser$result;

      /* select the action based on the action number */
      switch (CUP$PredicateParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arit_expr ::= arit_expr MUL arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.MUL); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("arit_expr",1, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arit_expr ::= arit_expr MINUS arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.MINUS); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("arit_expr",1, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arit_expr ::= arit_expr PLUS arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.PLUS); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("arit_expr",1, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arit_expr ::= LEFTPAREN arit_expr RIGHTPAREN 
            {
              AritExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).right;
		AritExpr e = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).value;
		 RESULT = e; 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("arit_expr",1, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arit_expr ::= NUMBER 
            {
              AritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ConstExpr(i); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("arit_expr",1, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arit_expr ::= IDENT 
            {
              AritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new LocalExpr(i); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("arit_expr",1, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool_expr ::= arit_expr GREATER arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.GREATER); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool_expr ::= arit_expr LESS arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.LESS); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bool_expr ::= arit_expr NEQ arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.NEQ); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bool_expr ::= arit_expr GREATER ASSIGN arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-3)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.GE); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-3)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bool_expr ::= arit_expr LESS ASSIGN arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-3)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.LE); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-3)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bool_expr ::= arit_expr ASSIGN arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.EQUAL); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bool_expr ::= NOT bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new NotBool(l); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bool_expr ::= bool_expr AND bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		BoolExpr r = (BoolExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComplexBool(l, r, BoolExpr.BXType.AND); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bool_expr ::= bool_expr OR bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		BoolExpr r = (BoolExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = new ComplexBool(l, r, BoolExpr.BXType.OR); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bool_expr ::= LEFTPAREN bool_expr RIGHTPAREN 
            {
              BoolExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).right;
		BoolExpr e = (BoolExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).value;
		 RESULT = e; 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-2)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bool_expr ::= FALSE 
            {
              BoolExpr RESULT =null;
		 RESULT = new ConstBool(false); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bool_expr ::= TRUE 
            {
              BoolExpr RESULT =null;
		 RESULT = new ConstBool(true); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bool_expr ::= MUL 
            {
              BoolExpr RESULT =null;
		 RESULT = new NondetBool(); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("bool_expr",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program bool_expr 
            {
              ArrayList<BoolExpr> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).right;
		ArrayList<BoolExpr> p = (ArrayList<BoolExpr>)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()).right;
		BoolExpr b = (BoolExpr)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.peek()).value;
		 RESULT = p; RESULT.add(b); 
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).right;
		ArrayList<BoolExpr> start_val = (ArrayList<BoolExpr>)((java_cup.runtime.Symbol) CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)).value;
		RESULT = start_val;
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.elementAt(CUP$PredicateParser$top-1)), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PredicateParser$parser.done_parsing();
          return CUP$PredicateParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= 
            {
              ArrayList<BoolExpr> RESULT =null;
		 RESULT = new ArrayList<BoolExpr>();
              CUP$PredicateParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PredicateParser$stack.peek()), RESULT);
            }
          return CUP$PredicateParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

